SHOCKWAVE FORMAT (general internal workings):

Section RIFX
{
	Uint32 chunklength
	FourCC formtype 
	(
		"MV93" for DXR and DIR 
		"FGDM" for DCR
		"APPL" for Projector RIFX container (see Projector Notes)
	)
	data //entire file, (minus chunkID & chunklength), chunklength bytes long
}

sub-chunks:

Section imap
{
	8 bytes unknown
	4 bytes mapOffset 
	/* 
		points to the currently valid mmap chunk
		as it turns-out, re-saving a .dir just appends data, including
		a new mmap chunk (does not happen with "save and compact") 
	*/
}

Section mmap
{
	8 bytes unknown
	4 bytes chunkCountMax? (maximum amount of chunks in this mmap before Director creates a second one and adds it to the imap?)
	4 bytes chunkCountUsed
	12 bytes unknown (Schockabsorber calls two of these junk pointer and free pointer for unknown reason)
	/*
		following those bytes is a list of chunks
		this is the mapping table
	*/
	entry
	{
		fourcc chunkID
		uint32 length (not sure why include this, since these entries are nothing but pointers to the chunk)
		uint32 offset
		uint16 attributes (seems to be 0x01 if chunk is "protected," as in unreadable by Director, not sure what other values do. Seems to commonly be 0x04 or 0x0C for junk and free chunks respectively, so may be a mask, with 0x04 meaning do not validate, and 0x08 meaning ignore in KEY* section ids)
		uint16 unknown (always zero)
		uint32 memsize? (the number of bytes of additional memory beyond the chunk's length that will need to be allocated to parse the rest of the chunk, i.e. for the imap/mmap entries this value will be the number of bytes needed to be allocated in memory to store everything within the mmap table?)
	}

}

Section KEY*
{
	data
	{
		Uint16 unknown (only 0x0C observed, possibly the length of each entry or the chunk header?)
		Uint16 unknown (only 0x0C observed, possibly the length of each entry or the chunk header?)
		Uint32 sectionCount
		Uint32 castCount (just a guess, need to verify)
		entry {
			/*
				dealing with spybotics suggests there's something more that goes on with
				the ID/index lookup. It could be a version-specific quirk? Using the exclusive
				IDs (ignoring free) is causing problems... and recent research with CAS* indicates certain values
				point to freespace (entries of solid 0x00, e.g. NULL) in the mapping table. Also noteworthy
				is the JavaScript parser at this time is unable to successfully parse the KEY* section in
				spybotics, and a majority of the CASt sections are somehow being skipped...
				This needs to be solved pronto, the castlib cannot be reconstructed without this data!
			*/
			Uint32 sectionIdex (the index of the section in the mmap excluding "free" sections, they are to be ignored)
			Uint32 castIndex (the index of the related CASt section in the mmap excluding "free" sections, they are to be ignored)
			fourcc chunkID
		}
		
	}
}

Section [ghost] junk
{
	// these are only seen in the mmap - when going to the offset specified, a different chunk name is found which this one replaces
	// effectively, "junk" replaces chunks that are currently empty, but may be needed later, such as, for example, an empty timeline in Director files
	// in the mmap, the fact the name is "junk" signifies that although they exist in the raw file, no memory is to be allocated for the chunk until it is needed
}

Section [ghost] free
{
	// these do not seem to actually exist, but are indexed in mmap for some reason
	// they typically have no offset (it's just zero)
	// they may serve the purpose of replacing deleted or obsolete chunks in the mmap (rather than empty chunks that simply don't need to be allocated yet, unlike junk, like the difference between empty/isset in PHP)
	// or they may have something else to do with memory allocation
{

Section XMED
{
	data {
		//format varies depending on the type of media
		@ Flash {
			Uint32 [big] length1
			Uint32 [big] version?
			Uint32 [big] length2 //seems to be the real length of the file
			data //embedded Flash SWF file
		}
		@ Text {
			data //some weird way of storing formatted text...
		}
		@ W3D {
			subHeader {
				String/FourCC? "3DEM"
				Uint32 [big] length1 //same as the section length
				Uint32 [big] version?
				Uint32 [big] length2 //seems to be the real length of the file
			}
			data //embedded W3D Model/Scene file
		}
	}
	// contains [certain] Xtra Media (any media requiring an Xtra to play)
	// observed so far : text [field] , Flash SWF , W3D Model/Scene
}

Section snd 
{
	/* 
		sometimes the length is 0 and it trails SWA audio.
		in that scenario the XMED and snd are linked to the same CASt in the KEY* section so the cast member is classed as a sound even though it requires an Xtra to play
		other times it contains raw PCM streams which GoldWave can import, and probably Audacity as well.
		observed: Raw PCM unsigned 8 bit, 11025 Hz, 88 kbps, mono (for the door opening sound in MYLK)
	*/
}

Section ediM
{
	data
	/*
		contains SWA audio-
		further analysis shows this contains other data/file types as well...further research required
	*/
	//known formats : JPEG Image file, SWA Audio file
}

Section BITD
{
	length
	data
	/*
		format varies...
		the format is a length followed by a value, across the width of the image one channel at a time
		however, the length has an odd quirk: you need to do 257 minus the length to get the actual length to use
		however, if 257 minus the length is less than 127, it is a literal run for that length plus one and specifies all the colours in a row like a raw image
	*/
	@4BPP {
		unknown, no examples analyzed yet
	}
	@8BPP {
		ByteArray(length * width), or some form of compression
	}
	@16BPP {
		unknown, no examples encountered yet
	}
	@24BPP {
		RLE {
			encodes all red, all green, all blue across entire width of image,
			then starts over until all rows have been encoded	
		}
	}
	@32BPP {
		RLE {
			encodes all alpha, all red, all green, all blue across entire width of image,
			then starts over until all rows have been encoded
			sometimes all alpha values are reversed, and 0 means 255, which only seems to occur if every value is 0
		}
	}
}

Section Thum
{
	//these two appear to be constantly 36
	Uint32 [big] width // ?
	Uint32 [big] height //?
	length - 8 bytes data {
		currently assumed to be RLE,
		but no success yet. Might be at bit depth 16 or lower
	}
	//thumnails? (only appears in a DIR that's been saved in Director)
}

Section CASt
{
	header
	{
		Uint32 [big-end] castMemberType
		(
			// do each of these correspond to one type of chunk or group of chunks? (BITD, whatever the chunk for a film loop is, CLUT, snd , whatever the chunk for a button is, whatever the chunk for a vector shape is, Lscr, and XMED?)
			0x01 : bitmap
			0x02 : film loop
			0x04 : palette
			0x06 : audio
			0X07 : button
			0x08 : vector shape
			0x0B : script
			0x0F : flash,font,text,W3D,QuickTime MOV //The common link between all is the requirement of Xtras to use these
		)
		Uint32 [big end] length2 //from 0x14 to specificData
		Uint32 [big-end] specificDataLen
		0x14 bytes skipThis {
			Uint32 [big-end] skipSize? (always 0x14)
			0x10 bytes unknownData (does vary, but purpose unknown)
		}
		Uint16 [big-end] offsetTableLen
			Uint32Array(offsetTableLen) offsetTable {
			Uint32 [big-end] offsetX //see formatNotes_CASt_fields
		}
		Uint32 [big end] finalDataLen
		metaData(finalDataLen)
		{
			//comprised of various fields...
			//see formatNotes_CASt_fields
		}
	}
	specificData(specificDataLength) 
	{
		/*
			These vary a lot, but they do seem to have an absolute structure and order
		*/
		paletteData {
			//nothing yet found, every palette observed thus far hasn't had any
		}
		bitmapData {
			//still trying to understand this one...
			2 bytes unknown
			Uint16 posY
			Uint16 posX
			Uint16 height // subtract posY for correct value
			Uint16 width // subtract posX for correct value
			Uint32 constant1 (1) //1 is so far, only observed value...
			4 bytes unknown
			Uint16 regPointY // subtract posY for correct value
			Uint16 regPointX // subtract posX for correct value
			1 byte unknown //possibly a bitfield
			1 byte bitsPerPixel //8,16,24,32
			Uint16 [big] palette ID //still needs research, but seems to be based on the cast member number of a given palette
		}
		scriptData {
			Uint16 [big-end] scriptType
			(
				00 01 : behavior
				00 03 : movie
				00 07 : parent
			)
		}
	}
	/*
		cast member metadata
		this chunk is proving particularly difficult to fully decypher, and recent efforts have 
		shown the available fields vary quite largely depending on any number of factors.
		This can be attributed to both the type of cast member, and even if a file has been
		Dir-Opened vs. being the genuine DIR source movie/document
	*/
}

Section CAS*
{
	Uint32Array(length) CAStIDs
	{
		/*
			a Unit32 array, each value is an indice according to the mapping table...
			The indeces should all point to CASt sections
		*/
	}
	/*
		This is a cast, or rather, a cast association table. This contains the neccesarry data to group
		CASt sections into a complete cast. It does not contain the name, however. The cast name would be found 
		in the MCsl section. External casts do not have a CAS* table, probaby because they do not need one with
		their data being stored in separate files.
	*/
}

Section CLUT
{
	// length is ALWAYS divisible by 6
	/*
		color palettes,
		each CLUT actually contains 2, and they're combined in a somewhat odd manner...
		Or, each color value has some extra data attached.
		Regardless, the reasons for the three extra bytes per entry is a mystery for the time being.
		Other than that, the data is an array of RGB24 colors
		The name of an Xtra seems to suggest this is lifted from Photoshop
	*/
	Array entries/data(length/6) {
		byte red
		byte red2
		byte green
		byte green2
		byte blue
		byte blue2
	}
}

Section MCsL
{
	/*
		cast list
	*/
	Uint32 [big] unknown (0x0c)
	Uint32 [big] castCount
	Uint16 [small?] unknown (0x400)
	Uint32 [big] arraySize
	Uint32Array(arraySize) offsetTable (one entry per cast) {
		Struct castDataOffsetEntry // four indices in the table make one entry
		{
			// all offsets are relative to the start of the data table
			Uint32 [big] nameOffset
			Uint32 [big] filePathOffset
			Uint32 [big] preloadSettingsOffset
			Uint32 [big] attributesOffset
		}
		/*
			This is practically identical to the offset tables found in CASt sections...
			excluding that the first U32 is either junk data, or a pointer to the
			data table, presumably relative to the end of this table. At this time,
			no MCsL have been discovered where this value is of any use.
		*/
	}
	Uint32 [big] castEntriesLength
	Array dataTable(castCount)
	{
		Struct castEntry {
			Null-terminated* Length(byte)-prefixed ASCII String name
			Null-terminated* Length(byte)-prefixed ASCII String filePath
			Uint16 [big] preloadSettings (0:when needed, 1: before frame one, 2: after frame one)
			Struct castAttributes {
				Uint16 [big] storageType? (0:external,1:internal) // purpose recently brought into question
				Uint16 [big] membersCount
				Uint16 [big] numID
				Uint16 [big] realCastID (starts at 0x400 , or 1024)
			}
		}
		/*
			This might still be slightly innaccurate...
			It's also somehow missing a value for preload settings
			
			*
			Some older versions appear not to use null-terminated strings, according to MrBrax
		*/
	}
	/*
		External cast files (CST,CCT,CXT) seem to not have these. It makes sense, because external casts only contain ONE
		cast: themselves.
	*/
	/*
	tomysshadow said:
	Also, haven't had a chance to document this but I should add: the IDs in MCsL refer to the CAS* chunks, 
	based on their index in mmap. The CAS* are a table of the IDs of CASt chunks in the mmap table, iirc, 
	and the chunks those CASt rely on are found using KEY*. So it goes MCsL > CAS* > mmap > CASt >KEY* > Data 
	(such as BITD, snd , etc.) note that multiple chunks can be linked to one CASt in KEY*, for example the 
	sound headers can be seperate of the sound itself using sndH and sndS

	This is one of my more recent realizations and it is with this that I finally begin to understand the 
	structure somewhat.

	Also, note that LCsM isn't present in older Director movies as not all versions of Director have cast libraries.
	
	src: https://github.com/Brian151/OpenShockwave/issues/9#issuecomment-313375248
	*/
}

Section STXT
{
	Uint32[big] headerLength (constant 0xC)
	Uint32[big] textLength
	Uint32[big] styleLength
	String(textLength) text
	// this could be something to do with color
	ByteArray(footerLength) styles {
		Uint16 [big] stylesArrayLength
		Array(arrayLength) stylesArray{
			Struct style {
				Uint32 [big] offset?
				Uint32 [big] constant? (0)
				Uint32 [little] unknown3 (seems constant)
				Uint16 [big] unknown4 // identify what attribute of text is affected?
				String(6) colorCode // RRGGBB format
			}
		}
	}
	// seems to be associated with scriptable cast members, like buttons and text fields
	// possible meaning : "S[tyled]T[e]XT" - updated with information from Tomysshadow
	// purpose : partially unknown
}

Section XTRl
{
	Uint32 length
	4 bytes unknown
	Uint32 [big-end] xtraCount
	Array entries(xtraCount) {
		Uint32 [big end] length
		Block(length) data
		{
			//needs more research
			0x22 bytes unknown (values seem fairly consistent)
			Uint32 [big-end] length2
			Block(length2) data
			{
				2 bytes unknown
				Uint8 nameLength
				String(nameLength) name
				3 bytes unknown
				Uint8 pathLength
				String(pathLength) path/url
				byte unknown (0x00)
			}
		}
	}
	[one extra padding byte if odd length]
	/*
		Xtra library/linkage...
		Lists required Xtras to play the movie
	*/
}

//Script Name Table
//originally documented by Shockabsorber in "section-Lnam.asćiidoc"
Section Lnam
{
	Uint32 Const1 (0x00)
	Uint32 Const2 (0x00)
	Uint32 [big] nameTablelength
	Uint32 [big] nameTablelength2 //usually equal to nameTablelength
	Uint16 [big] offset (constant 0x14) //where the names table actually begins
	Uint16 [big] namesCount //how many names
	Array names(namesCount) {
		Struct name {
			byte nameLength
			String(nameLength) nameText
		}
	}
}

shockwave format types:
DXR : 'protected'
DCR : compressed (via zlib)
DIR : uncompressed + unprotected
CXT : 'protected'
CCT : compressed (via zlib)
CST : uncompressed + unprotected
W3D : 3D model/scene file (related to the open U3D format, but exact similarities/differences not yet discovered)
SWA : Audio file (variation of MP3, but contains some extra data for use by Shockwave)

purposes:
D*R : movie, runs stand-alone, may load C*T's as dependencies
C*T : 
{
	external "cast" , basically an external library of stuff. 
	D*R's are made of multiple internal casts, and will attempt to
	load external casts if any have been linked.
	Some movies can play without the external casts
	External casts are of a similar structure a movie,
	except they only contain one cast, and cannot run as a stand-alone application.
	There are subtle differences in their internal layout, more research is required to
	determine what all of these are.
}

extra notes:
Spybotics, does not actually require its external casts to run.
However, this might impact the music*

*All remaining copies/archives of Spybotics: The Nightfall Incident
do not have the sound_level_<1-5>.cct, and the snd_netload_<1-5>.cct files.
It's quite possible official releases never actually did use them.
the sound_level_<x> files are all empty, and the snd_netload_<x> files
contain alternative soundtracks. These tracks probably are for databattles.
