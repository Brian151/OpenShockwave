based on lingo bytecode documentation from fileformats.archiveteam.org, but given more human-readable names
subject to change!
to-do: 
some instructions need better names
some instructions need names that aren't placeholders (OP_HH[XX][YY])
the purpose of some instructions remains to be determined

ALL ops (from decompiling dirAPI.dll):
// grouped ops are related in some way
// the results of these efforts indicates another instruction size: 4 bytes
// to-do : indentify purpose of each
01, 02, 03, 04, 05, 06, 07, 08, 09, 0a, 0b, 0c, 0d, 0e, 0f, 
10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 
1f, 20, 21, 22, 23, 41 81 c1, 43 83 c3, 44 84 c4, 45 85 c5, 
42 46 82 86 c2 c6, 47 87 c7, 48 88 c8, 49 89 c9, 4a 8a ca, 
4b 8b cb, 4c 8c cc, 4d 8d cd, 4e 8e ce, 4f 8f cf, 50 90 d0, 
51 91 d1, 52 92 d2, 53 93 d3, 54 94 d4, 55 95 d5, 56 96 d6, 
57 97 d7, 58 98 d8, 59 99 d9, 5a 9a da, 5b 9b db, 5c 9c dc, 
5d 9d dd, 5e 9e de, 5f 9f df, 60 a0 e0, 61 a1 e1, 70 b0 f0, 
62 a2 e2, 63 a3 e3, 64 a4 e4, 65 a5 e5, 66 a6 e6, 67 a7 83, 
68 a8 84, 69 a9 e9, 6a aa ea, 6b ab eb, 6c ac ec, 6d ad ed, 
ae, ef, f1

HEX VALUE,... {
	name
	description
}
?<something> indicates it may not actually be used

ONE BYTE CODES
01 {
	RET 
	leave current function and return to caller
}
02 {
	NOP 
	nothing documented for this
}
03 {
	PUSHFALSE
	push 0 or false
}
04 {
	MUL 
	multiply two values
}
05 {
	ADD 
	add two values
}
06 {
	SUB 
	subtract B from A
}
07 {
	DIV 
	divide A by B
}
08 {
	MOD 
	mod A by B
}
09 {
	INV 
	negate A
}
0a {
	JOINSTR 
	concat strings A and B
}
0b {
	JOINPADSTR 
	concat strings A and B with a space in-between
}
0c {
	LT 
	check if A is less than B
}
0d {
	LTEQ 
	check if A is less than or equal to B
}
0e {
	NTEQ 
	check if A and B are unequal
}
0f {
	EQ 
	check if A and B are equal
}
10 {
	GT 
	check if A is greater than B
}
11 {
	GTEQ 
	check if A is greaten than or equal to B
}
12 {
	AND 
	check if A and B are logically true
}
13 {
	OR 
	check if A or B is logically true
}
14 {
	NOT 
	check if A is logically false
}
15 {
	CONTAINSSTR 
	check if string A contains string B, case insensitive
}
16 {
	CONTAINS0STR 
	check is string A starts with string B, case insensitive
} 
17 {
	SPLITSTR 
	string splice/split
}
18 {
	LIGHTSTR 
	highlight some text
}
19 {
	ONTOSPR 
	sprite A is colliding with B
}
1a {
	INTOSPR 
	sprite A is inside B
}
1b {
	CASTSTR 
	unsure what to call it
}
1c {
	STARTOBJ 
	read bytecode docu
}
1d {
	STOPOBJ 
	read bytecode docu, related to code 1c
}
1e {
	WRAPLIST
	Seems to be used when using lists as parameters in functions...
	?exact purpose? determined by tomysshadow, op named by brian151
}
1f {
	NEWPROPLIST 
	creates a property list from a linear list,
	that must be in format [#symbol,value]
}
20 {
	UNK_20
	further research required
}
21 {
	UNK_21
	further research required
}
22 {
	UNK_22
	further research required
}
23 {
	UNK_23
	further research required
}

MULTI-BYTE CODES
/*
	// this determines what the next one to three bytes should be, some exceptions apply
	if op >= 128 : (XX * 0x100) + YY
	if op >= 192 : (XX * 0x10000) + (YY * 0x100) + ZZ
	else : XX
*/
41,81,?c1 {
	PUSHBYTE,PUSHSHORT,?PUSHINT24
	push an unsigned integer to the stack
}
42,82,?c2 {
	NEWARGLIST 
	pop values from stack to be used in a function call
}
43,83,c3 {
	NEWLIST 
	pop values from the stack to create a list/array
}
44,84,c4 {
	PUSHCONS
	push a value from constants records
}
45,85,c5 {
	PUSHSYMB 
	push a symbol from the namelst into the stack
}
46,86,?c6 {
	UNK_46,UNK_86,UNK_C6
	// dirapi decompilation suggests relation to NEWARGLIST
}
47,87,c7 {
	UNK_47,UNK_87,UNK_C7 
	further research required
}
48,88,c8 {
	UNK_48,UNK_88,UNK_C8
	further research required
}
49,89,c9 {
	PUSHGLOB
	push value of a global variable with a name from the namelist
}
4a,8a,ca {
	GETPROP
	push the value of a contextual property
}
4b,8b,cb {
	GETPARAM
	push value of a function call parameter
}
4c,8c,cc {
	PUSHLOC
	push the value of a local variable
}
4d,8d,cd {
	UNK_4D,UNK_8D,UNK_CD
	further research required
}
4e,8e,ce {
	UNK_4E,UNK_8E,UNK_CE
	further research required
}
4f,8f,cf {
	POPGLOB
	pop a value to set as the value of a global variable with a name from the namelist
}
50,90,d0 {
	SETPROP
	pop a value to set as the value of a contextual property with a name from the namelist
}
51,91,d1 {
	UNK_51,UNK_91,UNK_D1 
	further research required
}
52,92,d2 {
	POPLOC
	pop a value to set as a local variable
}
53,93,d3 {
	JMP
	unconditional jump
}
54,94,d4 {
	ENDREPEAT 
	unconditonal backwards jump
}
55,95,d5 {
	IFTRUE
	conditional jump if a value popped from stack is false
	/*
		in x86 Assembly, it's called jz, meaning "jump if zero"
		In other words, if the result is false, we skip by the
		specified number of bytes. Otherwise, we proceed to the next instruction.
		Putting this here because it did somewhat confuse me at first
		-Brian151
	*/
}
56,96,d6 {
	CALL_LOC 
	call a local function
}
57,97,d7 {
	CALLE 
	call an external function
}
58,98,d8 {
	CALLOBJ 
	call an object method
}
59 16 {
	OP_5916 
	unsure how target value is specified
}
59 25 {
	OP_5925 
	same...
}
59 35 {
	OP_5935 
	same...
}
5a,9a,da {
	UNK_5A,UNK_9A,UNK_DA 
	further research required
}
5b,9b,db {
	OP_5B05 
	unsure how target is specified
} 
5c XX {
	GET 
	the 5C opcodes are somewhat ambiguous, 
	their context is established based on a value that's 
	pulled from the stack, so creating a memonic token/name for
	the codes using purely the 5c instructions is impossible. 
	values popped from stack must be used to establish the exact
	instruction. see OPs_special.txt
}
5d XX {
	SET 
	same as 5c family/group, but sets values. see OPs_special.txt
}
5e,9e,de {
	UNK_5E,UNK_9E,UNK_DE
	further research required
}
5f,9f,df {
	GETMOVIEPROP 
	get movie property specified by provided namelist index
}
60,a0,e0 {
	SETMOVIEPROP 
	get movie property specified by provided namelist index
}
61,a1,e1 {
	GETOBJPROP 
	push the value of a property from an object
}
62,a2,e2 {
	SETOBJPROP 
	set the value of the proprty from an object
}
63,a3,e3 {
	OP_63
	tell some object to go to frame 1
}
64,a4,e4 {
	case
	number corresponds to the nesting level of this case, since they can be nested
	other code actually evaluates the conditions
}
65,a5,e5 {
	endcase
	number corresponds to the nesting level of this case, since they can be nested
}
66,a6,e6 {
	getmovieinfo
	get read-only movie property specified by provided namelist index
	consumes an empty argument list for some reason
}
67,a7,e7 {
	UNK_67 
	research required, newly discovered
}
68,a8,e8 {
	UNK_68,UNK_A8,UNK_E8
	further research required
}
69,a9,e9 {
	UNK_69,UNK_A9,UNK_E9
	further research required
}
6a,aa,ea {
	UNK_6A,UNK_AA,UNK_EA
	further research required
}
6b,ab,eb {
	UNK_6B,UNK_AB,UNK_EB
	further research required
}
6c,ac,ec {
	UNK_6C,UNK_AC,UNK_EC
	further research required
}
6d,ad,ed {
	UNK_6D,UNK_AD,UNK_ED
	further research required
}
70,F0,B0 {
	UNK_70,UNK_B0,UNK_F0
	further research required
}

rule-breakers:
// no matching codes for these...
AE XX YY {
	UNK_AE
	further research required
}
EF XX YY ZZ {
	UNK_EF
	further research required
}
F1 XX YY ZZ {
	UNK_F1
	further research required
}